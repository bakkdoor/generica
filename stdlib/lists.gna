(define empty? 
  (lambda (list)
    (if (= (length list) 0)
        t
      nil)))

(define map 
  (lambda (f list)
    (if (empty? list)
        nil
      (cons (f (car list)) (map f (cdr list))))))

(define each
  (lambda (f list)
    (if (empty? list)
        nil
      (do (f (car list))
          (each f (cdr list))))))

(define cadr
  (lambda (list)
    (car (cdr list))))

(define caddr
  (lambda (list)
    (car (cdr (cdr list)))))

(define cadddr
  (lambda (list)
    (car (cdr (cdr (cdr list))))))


(define caddddr
  (lambda (list)
    (car (cdr (cdr (cdr (cdr list)))))))

(define first
  (lambda (list)
    (car list)))

(define second
  (lambda (list)
    (car (cdr list))))

(define nth
  (lambda (n list)
    (if (= n 1)
        (car list)
      (nth (- n 1) (cdr list)))))

(define upto
  (lambda (a b)
    (if (> a b)
        nil
      (cons a (upto (+ a 1) b)))))

(define downto
  (lambda (a b)
    (if (< a b)
        nil
      (cons a (downto (- a 1) b)))))

(define filter
  (lambda (pred-fn list)
    (if (empty? list)
        nil
      (if (pred-fn (car list))
          (cons (car list) (filter pred-fn (cdr list)))
        (filter pred-fn (cdr list))))))

; Returns the first 'amount' Elements of the given List
(define take
  (lambda (amount lst)
    (if (> amount 0)
        (cons (car lst) (take (- amount 1) (cdr lst)))
      nil)))

; Skips the first 'amount' Elements of the List and returns the Rest
(define skip 
  (lambda (amount lst)
    (let ((rest (cdr lst)))
      (if (> amount 1)
          (skip (- amount 1) rest)
        rest))))

; Takes Elements out of a List while 'predicatefn' is true to the Elements of it.
; Returns Elements took out in a List
(define take-while 
  (lambda (predicatefn lst)
    (if (predicatefn (car lst))
        (cons (car lst) (take-while predicatefn (cdr lst)))
      nil)))

; Skips Elemnts while 'predicatefn' isn't true to the List
(define skip-while 
  (lambda (predicatefn lst)
    (if (predicatefn (car lst))
        (skip-while predicatefn (cdr lst))
      lst)))

(define reduce 
  (lambda (fn base-value list)
    (if (empty? list)
        base-value
      (fn (car list)
	  (reduce fn base-value (cdr list))))))